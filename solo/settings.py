"""
Django settings for solo project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
# from config import * # for social auth

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&9)3_rliq1#mfiqqlwfn6g6v*uhcg8qf-mowb0(@))$t$ed0)^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

#Log in Log out
#LOGIN_URL = '/login/'
#LOGOUT_URL = '/logout/'
# the django set login url
LOGIN_REDIRECT_URL = '/new'

STRIPE_SECRET_KEY = 'wefwljeflwkjef32j2h3lfh2938232f983fh23hf923'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'django.contrib.sites',	
	
	#GeoDjango
	'django.contrib.gis',
	
	# Bower Management
	'djangobower',
	
	# REST API
	'rest_framework',

	# stripe authentication through allauth
	'allauth',
	'allauth.account',
	'allauth.socialaccount',
	'allauth.socialaccount.providers.stripe',
	
	# my application
	'seller',
	
	# social auth for google login and instragram etc.
	'social.apps.django_app.default', # social auth
	
	# instagram api
	#'instagram',
]




MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'solo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
				'social.apps.django_app.context_processors.backends',
				'social.apps.django_app.context_processors.login_redirect',
				
            ],
        },
    },
]

WSGI_APPLICATION = 'solo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# postgres with gis support
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        # 'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'Letter2',
		'USER': 'postgres',
		'PASSWORD': 'pbn6h9E', 
        'HOST': '127.0.0.1', # 127.0.0.1 for local host
        'PORT': 5432,
    }
}




# source: https://realpython.com/blog/python/adding-social-authentication-to-django/
AUTHENTICATION_BACKENDS = (
	'social.backends.google.GoogleOAuth',
	'social.backends.google.GoogleOAuth2',
	'social.backends.instagram.InstagramOAuth2',
	'django.contrib.auth.backends.ModelBackend',
	'allauth.account.auth_backends.AuthenticationBackend',
)


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

STATICFILES_FINDERS = {
	'django.contrib.staticfiles.finders.FileSystemFinder',
	'django.contrib.staticfiles.finders.AppDirectoriesFinder',
	'djangobower.finders.BowerFinder',
	}
	
# bower
BOWER_PATH = os.path.join(BASE_DIR, 'bower_components')


# rest framework
#REST_FRAMEWORK = {
	# Django's standard 'django.contrib.auth' permissions,
	# or allow read-only access for unauthenticated users.
	#'DEFAULT_PERMISSION_CLASSES': [
	#	'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
	#]
#}

SITE_ID = 1

#################################################################
# allauth settings for social connections

# dictionary containing provider specific settings.
SOCIALACCOUNT_PROVIDERS = {
	'stripe':
		{'SCOPE': ['read_write',],
		}
}

# attempt to bypass the signup form by using fields (e.g. username, email) 
# retrieved from the social account provider. If a conflict arises due to a 
# duplicated e-mail the signup form will still kick in
SOCIALACCOUNT_AUTO_SIGNUP = True

#enforce uniqueness of e-mail address
ACCOUNT_UNIQUE_EMAIL = True

# user is required ot enter a username when signing up. note that the
# user will be asked to do so even if ACCOUNT_AUTHENTICATION_METHOD is set 
# to email. Set to False when you do not wish to prompt the user to enter a username.
ACCOUNT_USERNAME_REQUIRED = False

# the use is required to hand over an e-mail address when signing up
ACCOUNT_EMAIL_REQUIRED = True

# request email address from third part account provider
SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED


### google api key
GOOGLE_API_KEY = 'AIzaSyARs6CfrMGGhgZk4wjojfE5Gi0AiZzBOQ4' ## GoogleMaps location search api key. I hard coded this into the buyer.html. not sure how to pass it as an environment variable. 



